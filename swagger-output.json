{
  "swagger": "2.0",
  "info": {
    "title": "User Management",
    "description": "REST API for CRUD operations to manage users data using express.js",
    "version": "1.0.0"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/user/getAll": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve all users",
        "description": "Gets a list of all users, including their full names, email addresses, and hashed passwords.",
        "responses": {
          "200": {
            "description": "A list of users",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "example": "$2b$10$N9qo8uLOickgx2ZMRZoMye"
                  },
                  "fullName": {
                    "type": "string",
                    "example": "Jane Doe"
                  },
                  "email": {
                    "type": "string",
                    "example": "jane.doe@example.com"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/user/create": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user",
        "description": "Creates a new user with full name, email, and password. Includes validation for email and enforces strong password rules.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "fullName": {
                  "type": "string",
                  "description": "Full name of the user"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "Email address of the user"
                },
                "password": {
                  "type": "string",
                  "description": "Password for the user"
                }
              },
              "required": [
                "fullName",
                "email",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User created successfully"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Invalid email address"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "409": {
            "description": "User already exists",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User created successfully"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/user/edit": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user details",
        "description": "Updates an existing user\\'s full name and password based on the provided email. Email cannot be updated.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "fullName": {
                  "type": "string",
                  "description": "Full name of the user"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "Email address of the user"
                },
                "password": {
                  "type": "string",
                  "description": "Password for the user"
                }
              },
              "required": [
                "email"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User updated successfully"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "email is required"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/user/delete": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "Deletes a user by email.",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User deleted successfully"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "EmailId is required"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/user/uploadImage": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Upload user image",
        "description": "Uploads an image for a user and stores the image path in the database.",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "type": "string",
            "required": true
          },
          {
            "name": "image",
            "in": "formData",
            "type": "file",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Image uploaded successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Image uploaded successfully"
                },
                "imagePath": {
                  "type": "string",
                  "example": "/images/uploads/user123abc.jpg"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Image File type not supported! Only image/jpeg, image/gif and image/png is supported"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/user/getImage/{email}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve all users",
        "description": "Gets a list of images for the respective user",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of images",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "example": "api/images/{email}/fileName.jpg"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User is unauthorized"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Session is Expired! Please login again."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "User Login",
        "description": "Authenticate user credentials and generate JWT token if valid.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "Email address of the user"
                },
                "password": {
                  "type": "string",
                  "description": "Password for the user"
                }
              },
              "required": [
                "email",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful login. Returns user details along with JWT token.",
            "schema": {
              "type": "object",
              "properties": {
                "isUserValid": {
                  "type": "boolean",
                  "example": true
                },
                "fullName": {
                  "type": "string",
                  "example": "Jane Doe"
                },
                "userToken": {
                  "type": "string",
                  "example": "e32snfsoue2wrwlj32ou2432loi32n42jsouful23r3"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request. User not found or invalid password.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    }
  }
}